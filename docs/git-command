1. 统计git提交次数排名
  git log --pretty="%aN" --since=2020-1-1 | sort | uniq -c | sort -k 1 -n -r | head -n 1
2. 按照人和时间范围来统计代码量
  git log --author="tjulidonglin" --since=2018-01-01 --until=2019-12-31 --pretty=tformat: --numstat | awk 'BEGIN {add=0; subs=0; loc=0} { add += $1; subs += $2; loc += $1 - $2 } END { printf "added lines: %s, removed lines: %s, total lines: %s\n", add, subs, loc }'
3. 统计代码仓库中每个人的代码修改量信息
  git log --format='%aN' | sort -u | while read name; do printf "%-30s" "$name"; git log --author="$name" --pretty=tformat: --numstat | awk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf "added lines: %-8s removed lines: %-8s total lines: %-8s \n", add, subs, loc }' -; done
4. 消除git diff时文件mode变化的假修改
  git config --add core.filemode false
5. git format-patch commitID
  commitID开始到当前最新提交的补丁，不包含commitID对应的patch
6. git format-patch commitID -n
  commitID开始往后n个补丁生成patch，包括commitID对应的patch
7. git apply --stat  //检查patch修改哪些文件
8. git apply --check  //检查patch是否可以打上
9. git am --skip  //跳过有冲突的补丁
10. git am --abort  //放弃打补丁
11.git add --resolved //告诉git冲突已解决可以继续打patch

